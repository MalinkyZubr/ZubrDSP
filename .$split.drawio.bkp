<mxfile host="Electron" agent="Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) draw.io/28.0.4 Chrome/138.0.7204.97 Electron/37.2.1 Safari/537.36" version="28.0.4">
  <diagram name="Page-1" id="h59sVZ-mfmGLs4b8hLnP">
    <mxGraphModel dx="2279" dy="1211" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="1600" pageHeight="1600" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
        <mxCell id="jdwiW35CzVLMYtRzhfuA-5" value="" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;" edge="1" parent="1" source="jdwiW35CzVLMYtRzhfuA-1" target="jdwiW35CzVLMYtRzhfuA-4">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="jdwiW35CzVLMYtRzhfuA-1" value="Node&amp;lt;O,F&amp;gt;" style="rounded=0;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="50" y="340" width="120" height="60" as="geometry" />
        </mxCell>
        <mxCell id="jdwiW35CzVLMYtRzhfuA-9" value="" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;" edge="1" parent="1" source="jdwiW35CzVLMYtRzhfuA-2" target="jdwiW35CzVLMYtRzhfuA-8">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="jdwiW35CzVLMYtRzhfuA-2" value="add_channel()&lt;div&gt;create a dummy node and add it&#39;s communicator to list. Must have the same input and output as the root node (on which establish channels was called)&lt;br&gt;&lt;br&gt;also take a flag to say if it is a synchronized node,&amp;nbsp;&lt;br&gt;&lt;br&gt;returns another Node, on which step can be appended&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;" style="whiteSpace=wrap;html=1;rounded=0;" vertex="1" parent="1">
          <mxGeometry x="440" y="225" width="120" height="290" as="geometry" />
        </mxCell>
        <mxCell id="jdwiW35CzVLMYtRzhfuA-4" value="establish_channels()&lt;br&gt;marks the node as a channel divider. Effectively cap the current builder chain.&lt;br&gt;&lt;br&gt;Return self" style="whiteSpace=wrap;html=1;rounded=0;" vertex="1" parent="1">
          <mxGeometry x="260" y="280" width="120" height="180" as="geometry" />
        </mxCell>
        <mxCell id="jdwiW35CzVLMYtRzhfuA-6" value="" style="shape=flexArrow;endArrow=classic;html=1;rounded=0;" edge="1" parent="1" source="jdwiW35CzVLMYtRzhfuA-4" target="jdwiW35CzVLMYtRzhfuA-2">
          <mxGeometry width="50" height="50" relative="1" as="geometry">
            <mxPoint x="780" y="460" as="sourcePoint" />
            <mxPoint x="830" y="410" as="targetPoint" />
          </mxGeometry>
        </mxCell>
        <mxCell id="jdwiW35CzVLMYtRzhfuA-7" value="Pipeline objects should be organized by flow branch in separate vectors to organize the TUI display. Memory wise, the same, except more nested vectors" style="rounded=0;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="320" y="80" width="120" height="150" as="geometry" />
        </mxCell>
        <mxCell id="jdwiW35CzVLMYtRzhfuA-8" value="lock_channels()&lt;br&gt;prevent adding of additional channels. Similar to cap pipeline, creats SIMO mpsc connector (asynchronous to prevent slowest branch lockup)&lt;br&gt;Takes a step as input, which outputs a vector of the input datatype which gets passed in order to consumer channels (whether multiple copies or separate chunks of the same data)&lt;br&gt;&lt;br&gt;returns nothing" style="whiteSpace=wrap;html=1;rounded=0;" vertex="1" parent="1">
          <mxGeometry x="600" y="190" width="120" height="360" as="geometry" />
        </mxCell>
        <mxCell id="jdwiW35CzVLMYtRzhfuA-12" value="" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;" edge="1" parent="1" source="jdwiW35CzVLMYtRzhfuA-10" target="jdwiW35CzVLMYtRzhfuA-11">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="jdwiW35CzVLMYtRzhfuA-16" value="" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;" edge="1" parent="1" source="jdwiW35CzVLMYtRzhfuA-10" target="jdwiW35CzVLMYtRzhfuA-15">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="jdwiW35CzVLMYtRzhfuA-10" value="recombine()&lt;br&gt;&lt;br&gt;Takes a pipeline, generates a node marked as a recombination node, allowing it to recombine branches" style="rounded=0;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="50" y="540" width="120" height="180" as="geometry" />
        </mxCell>
        <mxCell id="jdwiW35CzVLMYtRzhfuA-14" value="" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;" edge="1" parent="1" source="jdwiW35CzVLMYtRzhfuA-11" target="jdwiW35CzVLMYtRzhfuA-13">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="jdwiW35CzVLMYtRzhfuA-11" value="add_channel()&lt;br&gt;takes a node and generates a communicator unit to place in a vector (Asynchronous receivers) to fill a vector of received data for the step to handle&lt;br&gt;&lt;br&gt;return nothing" style="whiteSpace=wrap;html=1;rounded=0;" vertex="1" parent="1">
          <mxGeometry x="260" y="490" width="120" height="280" as="geometry" />
        </mxCell>
        <mxCell id="jdwiW35CzVLMYtRzhfuA-13" value="Any successor can now be attached to the node to restart linear pipeline,as normal" style="whiteSpace=wrap;html=1;rounded=0;" vertex="1" parent="1">
          <mxGeometry x="440" y="585" width="120" height="90" as="geometry" />
        </mxCell>
        <mxCell id="jdwiW35CzVLMYtRzhfuA-15" value="add_lazy_channel()&lt;div&gt;&lt;br&gt;takes the types as usual but returns a lazy_channel() object which holds a mutex on the receiver list. Can be used for feedback systems, adding additional inputs after the node has a successor attached. Just says, &quot;Enforce the fact that another node will be attached here later&quot;&lt;/div&gt;" style="whiteSpace=wrap;html=1;rounded=0;" vertex="1" parent="1">
          <mxGeometry x="50" y="860" width="120" height="280" as="geometry" />
        </mxCell>
        <mxCell id="jdwiW35CzVLMYtRzhfuA-17" value="Architecture ensures that separate brnaches can have separate sinks, whether that be visual or practical (ie a tui widget, or an actual USB/ethernet interface) without interfering with overall functionality. Ensures maximum flexibility when designing processing systems. Would even probably allow for&amp;nbsp; a distributed architecture in future, using kubernetes or some other similar system" style="rounded=0;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="610" y="615" width="120" height="385" as="geometry" />
        </mxCell>
        <mxCell id="jdwiW35CzVLMYtRzhfuA-18" value="each thread should manage the kill signal to async tasks. each mpsc channel should have a true sender, and kill sender. Send enum of datatype and killflag" style="rounded=0;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="760" y="190" width="120" height="160" as="geometry" />
        </mxCell>
      </root>
    </mxGraphModel>
  </diagram>
</mxfile>
